
Parser state: Input IF

Parser state: Shift 23

Parser state: Stack: IF

Parser state: Input LBRACKET

Parser state: Shift 20

Parser state: Stack: IF LBRACKET

Parser state: Input WORD

Parser state: Shift 43

Parser state: Stack: IF LBRACKET WORD

Parser state: Input LESS

Parser state: Reduce [variable ::= WORD].

Parser state: Shift 47

Parser state: Stack: IF LBRACKET variable

Parser state: Shift 67

Parser state: Stack: IF LBRACKET variable LESS

Parser state: Input DIGIT

Parser state: Shift 66

Parser state: Stack: IF LBRACKET variable LESS DIGIT

Parser state: Input RBRACKET

Parser state: Shift 58

Parser state: Stack: IF LBRACKET variable LESS DIGIT RBRACKET

Parser state: Input THEN

Parser state: Reduce [condition ::= LBRACKET variable LESS DIGIT RBRACKET].

Parser state: Shift 73

Parser state: Stack: IF condition

Parser state: Shift 4

Parser state: Stack: IF condition THEN

Parser state: Input WORD

Parser state: Shift 29

Parser state: Stack: IF condition THEN WORD

Parser state: Input ELSE

Parser state: Reduce [command ::= WORD].

Parser state: Shift 6

Parser state: Stack: IF condition THEN command

Parser state: Reduce [command_line ::= command].

Parser state: Shift 35

Parser state: Stack: IF condition THEN command_line

Parser state: Reduce [command_line_list ::= command_line].

Parser state: Shift 7

Parser state: Stack: IF condition THEN command_line_list

Parser state: Reduce [input ::= command_line_list].

Parser state: Shift 44

Parser state: Stack: IF condition THEN input

Parser state: Reduce [result ::= input].

Parser state: Shift 72

Parser state: Stack: IF condition THEN result

Parser state: Shift 3

Parser state: Stack: IF condition THEN result ELSE

Parser state: Input WORD

Parser state: Shift 29

Parser state: Stack: IF condition THEN result ELSE WORD

Parser state: Input FI

Parser state: Reduce [command ::= WORD].

Parser state: Shift 6

Parser state: Stack: IF condition THEN result ELSE command

Parser state: Reduce [command_line ::= command].

Parser state: Shift 35

Parser state: Stack: IF condition THEN result ELSE command_line

Parser state: Reduce [command_line_list ::= command_line].

Parser state: Shift 7

Parser state: Stack: IF condition THEN result ELSE command_line_list

Parser state: Reduce [input ::= command_line_list].

Parser state: Shift 44

Parser state: Stack: IF condition THEN result ELSE input

Parser state: Reduce [result ::= input].

Parser state: Shift 71

Parser state: Stack: IF condition THEN result ELSE result

Parser state: Shift 50

Parser state: Stack: IF condition THEN result ELSE result FI

Parser state: Input EOL

Parser state: Reduce [branchig ::= IF condition THEN result ELSE result FI].

Parser state: Shift 54

Parser state: Stack: branchig

Parser state: Reduce [result ::= branchig].

Parser state: Shift 76

Parser state: Stack: result

Parser state: Shift 75

Parser state: Stack: result EOL

Parser state: Input $

Parser state: Reduce [program ::= result EOL].

Parser state: Accept!

Parser state: Popping $
