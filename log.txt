
Parser state: Input WHILE

Parser state: Shift 27

Parser state: Stack: WHILE

Parser state: Input LBRACKET

Parser state: Shift 6

Parser state: Stack: WHILE LBRACKET

Parser state: Input FILENAME

Parser state: Shift 71

Parser state: Stack: WHILE LBRACKET FILENAME

Parser state: Input LESS

Parser state: Reduce [argument ::= FILENAME].

Parser state: Shift 54

Parser state: Stack: WHILE LBRACKET argument

Parser state: Reduce [variable ::= argument].

Parser state: Shift 28

Parser state: Stack: WHILE LBRACKET variable

Parser state: Shift 15

Parser state: Stack: WHILE LBRACKET variable LESS

Parser state: Input FILENAME

Parser state: Shift 71

Parser state: Stack: WHILE LBRACKET variable LESS FILENAME

Parser state: Input RBRACKET

Parser state: Reduce [argument ::= FILENAME].

Parser state: Shift 31

Parser state: Stack: WHILE LBRACKET variable LESS argument

Parser state: Shift 52

Parser state: Stack: WHILE LBRACKET variable LESS argument RBRACKET

Parser state: Input SEMICOLON

Parser state: Reduce [condition ::= LBRACKET variable LESS argument RBRACKET].

Parser state: Shift 44

Parser state: Stack: WHILE condition

Parser state: Shift 43

Parser state: Stack: WHILE condition SEMICOLON

Parser state: Input DO

Parser state: Shift 4

Parser state: Stack: WHILE condition SEMICOLON DO

Parser state: Input FILENAME

Parser state: Shift 40

Parser state: Stack: WHILE condition SEMICOLON DO FILENAME

Parser state: Input ANDAND

Parser state: Reduce [command ::= FILENAME].

Parser state: Shift 8

Parser state: Stack: WHILE condition SEMICOLON DO command

Parser state: Reduce [command_line ::= command].

Parser state: Shift 57

Parser state: Stack: WHILE condition SEMICOLON DO command_line

Parser state: Reduce [command_line_list ::= command_line].

Parser state: Shift 11

Parser state: Stack: WHILE condition SEMICOLON DO command_line_list

Parser state: Shift 23

Parser state: Stack: WHILE condition SEMICOLON DO command_line_list ANDAND

Parser state: Input FILENAME

Parser state: Shift 62

Parser state: Stack: WHILE condition SEMICOLON DO command_line_list ANDAND FILENAME

Parser state: Input DOLLARLPAREN

Parser state: Reduce [command ::= FILENAME].

Parser state: Shift 8

Parser state: Stack: WHILE condition SEMICOLON DO command_line_list ANDAND command

Parser state: Shift 42

Parser state: Stack: WHILE condition SEMICOLON DO command_line_list ANDAND command DOLLARLPAREN

Parser state: Input FILENAME

Parser state: Shift 41

Parser state: Stack: WHILE condition SEMICOLON DO command_line_list ANDAND command DOLLARLPAREN FILENAME

Parser state: Input RPAREN

Parser state: Shift 73

Parser state: Stack: WHILE condition SEMICOLON DO command_line_list ANDAND command DOLLARLPAREN FILENAME RPAREN

Parser state: Input EOL

Parser state: Reduce [substitution_of_var ::= DOLLARLPAREN FILENAME RPAREN].

Parser state: Shift 69

Parser state: Stack: WHILE condition SEMICOLON DO command_line_list ANDAND command substitution_of_var

Parser state: Reduce [argument ::= substitution_of_var].

Parser state: Shift 63

Parser state: Stack: WHILE condition SEMICOLON DO command_line_list ANDAND command argument

Parser state: Reduce [argument_list ::= argument].

Parser state: Shift 17

Parser state: Stack: WHILE condition SEMICOLON DO command_line_list ANDAND command argument_list

Parser state: Reduce [command_line ::= command argument_list].

Parser state: Shift 60

Parser state: Stack: WHILE condition SEMICOLON DO command_line_list ANDAND command_line

Parser state: Reduce [command_line_list ::= command_line_list ANDAND command_line].

Parser state: Shift 11

Parser state: Stack: WHILE condition SEMICOLON DO command_line_list

Parser state: Reduce [input ::= command_line_list].

Parser state: Shift 47

Parser state: Stack: WHILE condition SEMICOLON DO input

Parser state: Reduce [result ::= input].

Parser state: Shift 75

Parser state: Stack: WHILE condition SEMICOLON DO result

Parser state: Reduce [while_cycle ::= WHILE condition SEMICOLON DO result].

Parser state: Shift 77

Parser state: Stack: while_cycle

Parser state: Reduce [result ::= while_cycle].

Parser state: Shift 49

Parser state: Stack: result

Parser state: Shift 48

Parser state: Stack: result EOL

Parser state: Input $

Parser state: Reduce [program ::= result EOL].

Parser state: Accept!

Parser state: Popping $
